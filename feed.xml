<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://aoc-2021.netlify.com</link>
    <atom:link href="https://aoc-2021.netlify.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Fri, 7 Jan 2022 12:02:14 +0000</pubDate>
    <lastBuildDate>Fri, 7 Jan 2022 12:02:14 +0000</lastBuildDate>

    
    <item>
      <title>Three: Test First</title>
      <link>https://aoc-2021.netlify.com/news/2019-12-13-test-first.html</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">news/2019-12-13-test-first.html</guid>
      <description>
      &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As developers we create software products out of ideas. This means that we have to translate fuzzy and incomplete requirements into precise and comprehensive implementations, which makes it such a challenging task and also a lot of fun :-).
There is a quite a good chance to miss the goal or just essential details while doing this. So bridging the gap between what our customers want and what we build makes the difference between success or failure. Fortunately there is an efficient method that can help you to succeed: Test First!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_specification_by_example&quot;&gt;Specification by Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We all know these requests from our customers that sound so simple but cause our alarm bells ringing: &quot;It should just work like the old system&quot; or &quot;Can you simply make the report view more like Excel?&quot;. Instead of just jumping into coding and giving our best to meet the expectations we should stop for a moment and try to figure out what exactly has to be implemented. The best way to build a common understanding of the requirements between stakeholders and developers are test cases. They specify the expected behaviour of our product using examples and come with these benefits:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;precise&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Writing test cases forces you to be as specific as possible about the interaction details, input parameters and result values for a new feature.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;verifiable&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;With tests as specification you can automatically verify your product against the requirements, again and again.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;comprehensible&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;All stakeholders - developers, QA experts and customers - are capable of understanding and contributing to test cases. In a way they are their &lt;a href=&quot;https://dictionary.cambridge.org/de/worterbuch/englisch/lingua-franca&quot;&gt;Lingua Franca&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_practice_makes_perfect&quot;&gt;Practice makes perfect&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Test First approach seems quite simple but you need some practice to master it. What is an efficient and effective test selection? How to write maintainable and concise tests? There are a lot of things to learn about test design and implementation. So, where to start? Why not with the Advent of Code exercises! Just start with extracting tests from the problem descriptions and then make them pass one by one by writing your implementation code. You will need some time to get used to this approach. Here are two tips to facilitate your first steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start with the happy path&lt;/strong&gt; It&amp;#8217;s easier to add edge cases and exception handling when you already have a working algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;one behaviour per test&lt;/strong&gt; This reduces the implementation steps and the time spent in the &quot;red zone&quot; of failing tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_else&quot;&gt;What else?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also other fields where you can use the Test First approach. For example this method can help you to learn new programming languages with Koans. These are failing Unit tests which forces you to apply language features to make the tests pass. In this way you are not just learning a new language but also how to develop test driven. So, what are you waiting for?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to learn more about Test Driven Development visit my website &lt;a href=&quot;http://agiledojo.de&quot; class=&quot;bare&quot;&gt;http://agiledojo.de&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy Testing,
Christian&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Two: Pair-Programming</title>
      <link>https://aoc-2021.netlify.com/news/2019-12-07-pair-programming.html</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">news/2019-12-07-pair-programming.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a developer doing &lt;a href=&quot;https://adventofcode.com&quot;&gt;Advent of Code&lt;/a&gt; puzzles, you probably already know about &lt;a href=&quot;https://en.wikipedia.org/wiki/Pair_programming&quot;&gt;pair programming&lt;/a&gt; but how often do you pair program?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chances are that you (like me) nearly never do pair programming.
But why not share the fun of Advent of Code and solve one puzzle with pair programming?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go and find someone at home or at work, grab a hot cup of coffee and try to solve one of the puzzles during the next #c0ffee break together!
Share your keyboard and screen and try to solve the puzzle together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy second Advent!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ralf&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>ONE: Docs-as-Code</title>
      <link>https://aoc-2021.netlify.com/news/2019-11-29-one-docs-as-code.html</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">news/2019-11-29-one-docs-as-code.html</guid>
      <description>
      &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Docs-as-Code&lt;/em&gt; is the approach where you treat your documentation as code which means you store it along with your code and you &quot;compile&quot; it from a plain text format to HTML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Within this repository, you can give this approach a try.
Whenever you store a &lt;code&gt;README.adoc&lt;/code&gt; along with your code, the build will pick it up and render it on the website.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To give it a try on your local machine, just execute&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;./gradlew  generateIndex bake bakePreview&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and the build will generate the website and start a server for you.
You can also get a powerful preview of your docs if you install the AsciiDoc plugin for your favourite Editor or IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_example&quot;&gt;Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example, the &lt;code&gt;README.adoc&lt;/code&gt; for the JavaScript &quot;Hello World&quot; example created by &lt;code&gt;docToolchain&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/day00/groovy/docToolchain/README.adoc&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight linenums&quot;&gt;&lt;code class=&quot;language-aciidoc&quot; data-lang=&quot;aciidoc&quot;&gt;== Hello World

This solution is written in Groovy.

I will use my helper to read the input from a file:

[source, groovy, numbered]
....
include::solution.groovy[tags=helper]
....

=== First Star

The solutions shall print out a greeting.
I will wrap this in a simple `helloWorld` method.

[source, groovy, numbered]
....
include::solution.groovy[tags=starOne,!starTwo]
....

&amp;lt;1&amp;gt; this is where I call the helper method to read my input

[plantuml]
----
file input.txt
component readInput
component helloWorld
helloWorld -&amp;gt; readInput : calls
readInput -&amp;gt; input.txt : reads file
----

=== Second Star

There is no second star.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and it is rendered &lt;a href=&quot;https://aoc-2021.netlify.com/generated/coder/doctoolchain/generateddays#_day_00_groovy&quot;&gt;on the webpage&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_about_asciidoc&quot;&gt;About AsciiDoc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;.adoc&lt;/code&gt; format is just plain text but quite powerful.
Here are some examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_headlines&quot;&gt;Headlines&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just add some &lt;code&gt;=&lt;/code&gt; in front of your line to get a headline&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot;&gt;&lt;pre&gt;== Level 1
=== Level 2
==== Level 3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_level_1&quot;&gt;Level 1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_level_2&quot;&gt;Level 2&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_level_3&quot;&gt;Level 3&lt;/h4&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_basic_formatting&quot;&gt;Basic Formatting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several text formatting styles available.
Here are three examples:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot;&gt;&lt;pre&gt;This is *bold*, _kursive_, `monospaced`&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is &lt;strong&gt;bold&lt;/strong&gt;, &lt;em&gt;kursive&lt;/em&gt;, &lt;code&gt;monospaced&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_include_source&quot;&gt;Include Source&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You don&amp;#8217;t have to copy &amp;amp; paste your source to your docs, just reference them:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot;&gt;&lt;pre&gt;[source, groovy, numbered]
----
Unresolved directive in &amp;lt;stdin&amp;gt; - include::helloWorld.groovy[]
----&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight linenums&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;println &quot;*&quot;*20
println &quot;Hello World&quot;.center(20)
println &quot;*&quot;*20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_diagrams&quot;&gt;Diagrams&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And you even have &lt;a href=&quot;https://plantuml.com/&quot;&gt;plantUML&lt;/a&gt; at hand - a powerful library which converts text into diagrams:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot;&gt;&lt;pre&gt;[plantuml]
----
[a] -&amp;gt; [b]
[b] -&amp;gt; [c]
[c] -&amp;gt; [a]
----&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;diag-0ced7fda6d113cb233f3e4a124e91d49.png&quot; alt=&quot;diag 0ced7fda6d113cb233f3e4a124e91d49&quot; width=&quot;170&quot; height=&quot;90&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can read more about AsciiDoc in the the &lt;a href=&quot;https://asciidoctor.org/docs/user-manual/&quot;&gt;AsciiDoc User Manual&lt;/a&gt; and more about the Docs-as-Code approach at &lt;a href=&quot;https://docs-as-co.de&quot; class=&quot;bare&quot;&gt;https://docs-as-co.de&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now try to document your solution with your own &lt;code&gt;README.adoc&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    

  </channel> 
</rss>
